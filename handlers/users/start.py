import os
import time
import logging
import re
from datetime import datetime

import pytz
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters.builtin import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from googleapiclient.errors import HttpError


tz = pytz.timezone('Asia/Tashkent')

from data.config import GOOGLE_CREDENTIALS_FILE, SPREADSHEET_ID, SHEET_NAME, DRIVE_FOLDER_ID
from loader import dp, bot
from states.Tok_Uchun import RequestForm

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMINS = [973358587]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
def connect_to_google_sheets():
    try:
        scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
        creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_CREDENTIALS_FILE, scope)
        client = gspread.authorize(creds)
        sheet = client.open_by_key(SPREADSHEET_ID).worksheet(SHEET_NAME)
        return sheet
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {str(e)}")
        raise

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Drive
def connect_to_google_drive():
    try:
        scope = ['https://www.googleapis.com/auth/drive']
        creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_CREDENTIALS_FILE, scope)
        drive_service = build('drive', 'v3', credentials=creds)
        return drive_service
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Drive: {str(e)}")
        raise

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
def check_folder_exists(drive_service, folder_id):
    try:
        folder = drive_service.files().get(fileId=folder_id).execute()
        logging.info(f"–ü–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder['name']} (ID: {folder_id})")
        return True
    except HttpError as e:
        logging.error(f"–ü–∞–ø–∫–∞ —Å ID {folder_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {str(e)}")
        return False


def create_drive_folder(drive_service, folder_name):
    try:
        file_metadata = {
            'name': folder_name,
            'mimeType': 'application/vnd.google-apps.folder'
        }
        folder = drive_service.files().create(body=file_metadata, fields='id').execute()
        folder_id = folder.get('id')
        drive_service.permissions().create(
            fileId=folder_id,
            body={'type': 'anyone', 'role': 'reader'}
        ).execute()
        logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞: {folder_name} (ID: {folder_id})")
        return folder_id
    except HttpError as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {str(e)}")
        return None

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Google Drive
def upload_to_drive(file_path):
    try:
        drive_service = connect_to_google_drive()
        folder_id = DRIVE_FOLDER_ID
        if not check_folder_exists(drive_service, folder_id):
            logging.warning(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {folder_id}. –°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞...")
            folder_id = create_drive_folder(drive_service, "Bot Photos –ù–æ–≤–∞—è")
            if not folder_id:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É.")
                return None
            logging.info(f"–ù–æ–≤—ã–π ID –ø–∞–ø–∫–∏: {folder_id}")

        file_metadata = {
            'name': os.path.basename(file_path),
            'parents': [folder_id]
        }
        media = MediaFileUpload(file_path, mimetype='image/jpeg')
        file = drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()
        file_id = file.get('id')
        drive_service.permissions().create(
            fileId=file_id,
            body={'type': 'anyone', 'role': 'reader'}
        ).execute()
        logging.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, ID: {file_id}")
        return f"https://drive.google.com/file/d/{file_id}/view"
    except HttpError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Drive: {str(e)}")
        return None
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
def get_location_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True))
    return keyboard

# Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (–µ—Å—Ç—å/–Ω–µ—Ç)
def get_cadastr_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úÖ –ö–∞–¥–∞—Å—Ç—Ä  –µ—Å—Ç—å", callback_data="cadastr_yes"))
    keyboard.add(InlineKeyboardButton("‚ùå –ö–∞–¥–∞—Å—Ç—Ä –Ω–µ—Ç", callback_data="cadastr_no"))
    return keyboard

# Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞ (–µ—Å—Ç—å/–Ω–µ—Ç)
def get_transformer_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä –µ—Å—Ç—å", callback_data="transformer_yes"))
    keyboard.add(InlineKeyboardButton("‚ùå –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä –Ω–µ—Ç", callback_data="transformer_no"))
    return keyboard

# Inline-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
def get_request_button():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìù –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="start_request"))
    return keyboard

# Inline-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
def get_restart_button():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_request"))
    return keyboard

# Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏
def get_station_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("20–∫–í—Ç", callback_data="station_20kwt"))
    keyboard.add(InlineKeyboardButton("60–∫–í—Ç", callback_data="station_60kwt"))
    keyboard.add(InlineKeyboardButton("80–∫–í—Ç", callback_data="station_80kwt"))
    keyboard.add(InlineKeyboardButton("120–∫–í—Ç", callback_data="station_120kwt"))
    keyboard.add(InlineKeyboardButton("160–∫–í—Ç", callback_data="station_160kwt"))
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    await message.answer(
        f"<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!</b> üéâ\n\n"
        f"–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:\n\n"
        f"<i>–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /cancel.</i>",
        parse_mode="HTML",
        reply_markup=get_request_button()
    )
    logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} - {message.from_user.full_name}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
@dp.callback_query_handler(lambda c: c.data == "start_request")
async def start_request_callback(callback: types.CallbackQuery):
    await RequestForm.manager_name.set()
    await callback.message.answer(
        "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b>",
        parse_mode="HTML"
    )
    await callback.message.delete()
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –∑–∞–ø—Ä–æ—Å")

# –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@dp.message_handler(state=RequestForm.manager_name)
async def process_manager_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['manager_name'] = message.text
    await RequestForm.contact_name.set()
    await message.reply(
        "<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º—è):",
        parse_mode="HTML"
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {message.text}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
@dp.callback_query_handler(lambda c: c.data == "restart_request", state="*")
async def restart_request_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await RequestForm.manager_name.set()
    await callback.message.answer(
        "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b>",
        parse_mode="HTML"
    )
    await callback.message.delete()
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª –∑–∞–ø—Ä–æ—Å")

# –ö–æ–º–∞–Ω–¥–∞ /cancel - –ø–æ–ª–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
@dp.message_handler(Command('cancel'), state='*')
async def cancel_process(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "<b>–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.</b> ‚úÖ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ:",
        parse_mode="HTML",
        reply_markup=get_restart_button()
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –ø—Ä–æ—Ü–µ—Å—Å")

# –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ
@dp.message_handler(state=RequestForm.contact_name)
async def process_contact_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['contact_name'] = message.text
    await RequestForm.phone.set()
    await message.reply(
        "<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, +998901234567 –∏–ª–∏ 901234567):",
        parse_mode="HTML"
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: {message.text}")


@dp.message_handler(state=RequestForm.phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text
    if not (re.match(r'^\+998[0-9]{9}$', phone) or re.match(r'^[0-9]{9}$', phone)):
        await message.reply(
            "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, +998901234567 –∏–ª–∏ 901234567):",
            parse_mode="HTML"
        )
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
        return
    async with state.proxy() as data:
        data['phone'] = phone
    await RequestForm.address.set()
    await message.reply(
        "<b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–∞–º–∞—Ä–∫–∞–Ω–¥):",
        parse_mode="HTML"
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}")

# –ê–¥—Ä–µ—Å
@dp.message_handler(state=RequestForm.address)
async def process_address(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['address'] = message.text
    await RequestForm.cadastr_number.set()
    await message.reply(
        "<b>–£ –≤–∞—Å –µ—Å—Ç—å –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä?</b>",
        parse_mode="HTML",
        reply_markup=get_cadastr_keyboard()
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∞–¥—Ä–µ—Å: {message.text}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
@dp.callback_query_handler(lambda c: c.data in ["cadastr_yes", "cadastr_no"], state=RequestForm.cadastr_number)
async def process_cadastr_choice(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if callback.data == "cadastr_yes":
            data['has_cadastr'] = "–ï—Å—Ç—å"
        else:
            data['has_cadastr'] = "–ù–µ—Ç"
    await RequestForm.has_transformer.set()
    await callback.message.answer(
        "<b>–£ –≤–∞—Å –µ—Å—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä?</b>",
        parse_mode="HTML",
        reply_markup=get_transformer_keyboard()
    )
    await callback.message.delete()
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª: {data['has_cadastr']}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞
@dp.callback_query_handler(lambda c: c.data in ["transformer_yes", "transformer_no"], state=RequestForm.has_transformer)
async def process_transformer_choice(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if callback.data == "transformer_yes":
            data['has_transformer'] = "–ï—Å—Ç—å"
            await RequestForm.transformer_power.set()
            await callback.message.answer(
                "<b>–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –¢–ü (–∫–í—Ç):</b>",
                parse_mode="HTML"
            )
        else:
            data['has_transformer'] = "–ù–µ—Ç"
            data['transformer_power'] = ""
            data['free_power'] = ""
            data['station'] = ""
            await RequestForm.location.set()
            await callback.message.answer(
                "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>",
                parse_mode="HTML",
                reply_markup=get_location_keyboard()
            )
    await callback.message.delete()
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä: {data['has_transformer']}")

# –ú–æ—â–Ω–æ—Å—Ç—å –¢–ü
@dp.message_handler(state=RequestForm.transformer_power)
async def process_transformer_power(message: types.Message, state: FSMContext):
    power = message.text
    if not re.match(r'^\d+$', power):
        await message.reply("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –¢–ü –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ (–∫–í—Ç):</b>", parse_mode="HTML")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–æ—â–Ω–æ—Å—Ç–∏ –¢–ü: {power}")
        return
    async with state.proxy() as data:
        data['transformer_power'] = power
    await RequestForm.free_power.set()
    await message.reply("<b>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å –¢–ü (–∫–í—Ç):</b>", parse_mode="HTML")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –º–æ—â–Ω–æ—Å—Ç—å –¢–ü: {power}")

# –°–≤–æ–±–æ–¥–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –¢–ü
@dp.message_handler(state=RequestForm.free_power)
async def process_free_power(message: types.Message, state: FSMContext):
    free_power = message.text
    if not re.match(r'^\d+$', free_power):
        await message.reply("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å –¢–ü –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ (–∫–í—Ç):</b>", parse_mode="HTML")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–≤–æ–±–æ–¥–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ –¢–ü: {free_power}")
        return
    async with state.proxy() as data:
        data['free_power'] = free_power
    await RequestForm.station.set()
    await message.reply("<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é:</b>", parse_mode="HTML", reply_markup=get_station_keyboard())
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Å–≤–æ–±–æ–¥–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å –¢–ü: {free_power}")

# –°—Ç–∞–Ω—Ü–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith("station_"), state=RequestForm.station)
async def process_station(callback: types.CallbackQuery, state: FSMContext):
    station_mapping = {
        "station_20kwt": "20–∫–í—Ç",
        "station_60kwt": "60–∫–í—Ç",
        "station_80kwt": "80–∫–í—Ç",
        "station_120kwt": "120–∫–í—Ç",
        "station_160kwt": "160–∫–í—Ç"
    }
    station = station_mapping[callback.data]
    async with state.proxy() as data:
        data['station'] = station
    await RequestForm.location.set()
    await callback.message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>", parse_mode="HTML", reply_markup=get_location_keyboard())
    await callback.message.delete()
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Å—Ç–∞–Ω—Ü–∏—é: {station}")

# –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
@dp.message_handler(content_types=['location'], state=RequestForm.location)
async def process_location(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        latitude = message.location.latitude
        longitude = message.location.longitude
        data['location_link'] = f"https://maps.google.com/?q={latitude},{longitude}"
    await RequestForm.photo.set()
    await message.reply(
        "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞:</b>",
        parse_mode="HTML",
        reply_markup=types.ReplyKeyboardRemove()
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {data['location_link']}")

@dp.message_handler(state=RequestForm.location)
async def invalid_location(message: types.Message):
    await message.reply(
        "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É:</b>",
        parse_mode="HTML",
        reply_markup=get_location_keyboard()
    )
    logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è")

# –§–æ—Ç–æ
@dp.message_handler(content_types=['photo'], state=RequestForm.photo)
async def process_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        file_path = file_info.file_path
        temp_file = f"temp_{message.from_user.id}_{int(time.time())}.jpg"
        await bot.download_file(file_path, temp_file)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Google Drive
        photo_link = upload_to_drive(temp_file)
        if photo_link:
            data['photo_link'] = photo_link
        else:
            data['photo_link'] = ""
            logging.warning(f"–§–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if os.path.exists(temp_file):
            os.remove(temp_file)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        current_time = datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")

        # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
        try:
            sheet = connect_to_google_sheets()
            sheet.append_row([
                data['manager_name'],
                current_time,
                data['contact_name'],
                data['phone'],
                data['address'],
                data['has_cadastr'],
                data['has_transformer'],
                data['transformer_power'],
                data['free_power'],
                data['station'],
                data['photo_link'],
                data['location_link']
            ])
            logging.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets: {message.from_user.id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {str(e)}")
            await message.reply(
                "‚ö† <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                parse_mode="HTML",
                reply_markup=get_restart_button()
            )
            await state.finish()
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_message = (
            f"<b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:</b>\n"
            f"üë§ –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {data['manager_name']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {current_time}\n"
            f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: {data['contact_name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"üè† –ê–¥—Ä–µ—Å: {data['address']}\n"
            f"üìú –ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π: {data['has_cadastr']}\n"
            f"‚ö° –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä: {data['has_transformer']}\n"
            f"üîå –ú–æ—â–Ω–æ—Å—Ç—å –¢–ü: {data['transformer_power'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} –∫–í—Ç\n"
            f"üîã –°–≤–æ–±–æ–¥–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –¢–ü: {data['free_power'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} –∫–í—Ç\n"
            f"üè≠ –°—Ç–∞–Ω—Ü–∏—è: {data['station'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {data['location_link'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üì∏ –§–æ—Ç–æ: {data['photo_link'] or '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}"
        )
        for admin_id in ADMINS:
            try:
                await bot.send_message(int(admin_id), admin_message, parse_mode="HTML")
                if data['photo_link']:
                    await bot.send_message(int(admin_id), data['photo_link'])
                logging.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É: {admin_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {str(e)}")

        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–ø—Ä–æ—Å, —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ: {data['photo_link']}")

    await message.reply(
        "<b>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b> ‚úÖ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ:",
        parse_mode="HTML",
        reply_markup=get_restart_button()
    )
    await state.finish()


# –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ
@dp.message_handler(state=RequestForm.photo)
async def invalid_photo(message: types.Message):
    await message.reply(
        "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ:</b>",
        parse_mode="HTML"
    )
    logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ")
